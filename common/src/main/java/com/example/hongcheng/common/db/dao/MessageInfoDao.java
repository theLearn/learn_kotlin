package com.example.hongcheng.common.db.dao;

import com.example.hongcheng.common.db.model.MessageInfo;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_INFO".
*/
public class MessageInfoDao extends AbstractDao<MessageInfo, Long> {

    public static final String TABLENAME = "MESSAGE_INFO";

    /**
     * Properties of entity MessageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgId = new Property(1, String.class, "msgId", false, "MSG_ID");
        public final static Property Content = new Property(2, Double.class, "content", false, "CONTENT");
        public final static Property Title = new Property(3, Double.class, "title", false, "TITLE");
        public final static Property Date = new Property(4, Double.class, "date", false, "DATE");
        public final static Property Params = new Property(5, Double.class, "params", false, "PARAMS");
    };


    public MessageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MessageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MSG_ID\" TEXT," + // 1: msgId
                "\"CONTENT\" REAL," + // 2: content
                "\"TITLE\" REAL," + // 3: title
                "\"DATE\" REAL," + // 4: date
                "\"PARAMS\" REAL);"); // 5: params
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(2, msgId);
        }
 
        Double content = entity.getContent();
        if (content != null) {
            stmt.bindDouble(3, content);
        }
 
        Double title = entity.getTitle();
        if (title != null) {
            stmt.bindDouble(4, title);
        }
 
        Double date = entity.getDate();
        if (date != null) {
            stmt.bindDouble(5, date);
        }
 
        Double params = entity.getParams();
        if (params != null) {
            stmt.bindDouble(6, params);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageInfo readEntity(Cursor cursor, int offset) {
        MessageInfo entity = new MessageInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msgId
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5) // params
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setParams(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MessageInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MessageInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
